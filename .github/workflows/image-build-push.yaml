name: Docker Build

on:
  push:
    branches:
      - main # Only build and push after PR is merged to main
  workflow_dispatch:
  release:
    types: [published, edited]

permissions:
  contents: read
  packages: write

env:
  DOCKERHUB_IMAGE: sirantd/aws-helm-kubectl
  GHCR_IMAGE: ghcr.io/perun-engineering/aws-helm-kubectl

jobs:
  define:
    runs-on: ubuntu-latest
    outputs:
      kubernetes_versions: ${{ steps.read_env.outputs.versions }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Read environment file
        id: read_env
        run: |
          # Extract only the KUBERNETES_VERSIONS line and get the array part
          VERSIONS=$(grep '^KUBERNETES_VERSIONS=' .env | cut -d'=' -f2-)
          echo "versions=$VERSIONS" >> $GITHUB_OUTPUT

  build:
    needs:
      - define
    strategy:
      fail-fast: true
      matrix:
        include:
          - platform: linux/amd64
            runner: ubuntu-latest
          - platform: linux/arm64
            runner: ubuntu-24.04-arm
        version: ${{fromJson(needs.define.outputs.kubernetes_versions)}}
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Read environment file
        run: cat .env >> ${GITHUB_ENV}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.DOCKERHUB_IMAGE }}
            ${{ env.GHCR_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
      - name: Build test image for security scan (amd64 only)
        if: matrix.platform == 'linux/amd64'
        uses: docker/build-push-action@v6
        with:
          context: .
          load: true
          platforms: linux/amd64
          tags: test-image:${{ matrix.version }}
          build-args: |
            KUBE_VERSION=${{ matrix.version }}
            HELM_VERSION=${{ env.HELM_VERSION }}
            SOPS_VERSION=${{ env.SOPS_VERSION }}
            HELM_SECRETS_VERSION=${{ env.HELM_SECRETS_VERSION }}
            HELM_S3_VERSION=${{ env.HELM_S3_VERSION }}
            HELMFILE_VERSION=${{ env.HELMFILE_VERSION }}
            AWS_CLI_VERSION=${{ env.AWS_CLI_VERSION }}
            HELM_DIFF_VERSION=${{ env.HELM_DIFF_VERSION }}
            ALPINE_PYTHON=${{ env.ALPINE_PYTHON }}
            ALPINE_VERSION=${{ env.ALPINE_VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner (informational only)
        if: matrix.platform == 'linux/amd64'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: test-image:${{ matrix.version }}
          format: "table"
          severity: "CRITICAL,HIGH"

      - name: Build and push to Docker Hub
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: ${{ matrix.platform }}
          outputs: type=image,name=${{ env.DOCKERHUB_IMAGE }},push-by-digest=true,name-canonical=true,push=true
          build-args: |
            KUBE_VERSION=${{ matrix.version }}
            HELM_VERSION=${{ env.HELM_VERSION }}
            SOPS_VERSION=${{ env.SOPS_VERSION }}
            HELM_SECRETS_VERSION=${{ env.HELM_SECRETS_VERSION }}
            HELM_S3_VERSION=${{ env.HELM_S3_VERSION }}
            HELMFILE_VERSION=${{ env.HELMFILE_VERSION }}
            AWS_CLI_VERSION=${{ env.AWS_CLI_VERSION }}
            HELM_DIFF_VERSION=${{ env.HELM_DIFF_VERSION }}
            ALPINE_PYTHON=${{ env.ALPINE_PYTHON }}
            ALPINE_VERSION=${{ env.ALPINE_VERSION }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Re-tag and push to GHCR
        id: build-ghcr
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: ${{ matrix.platform }}
          outputs: type=image,name=${{ env.GHCR_IMAGE }},push-by-digest=true,name-canonical=true,push=true
          build-args: |
            KUBE_VERSION=${{ matrix.version }}
            HELM_VERSION=${{ env.HELM_VERSION }}
            SOPS_VERSION=${{ env.SOPS_VERSION }}
            HELM_SECRETS_VERSION=${{ env.HELM_SECRETS_VERSION }}
            HELM_S3_VERSION=${{ env.HELM_S3_VERSION }}
            HELMFILE_VERSION=${{ env.HELMFILE_VERSION }}
            AWS_CLI_VERSION=${{ env.AWS_CLI_VERSION }}
            HELM_DIFF_VERSION=${{ env.HELM_DIFF_VERSION }}
            ALPINE_PYTHON=${{ env.ALPINE_PYTHON }}
            ALPINE_VERSION=${{ env.ALPINE_VERSION }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha

      - name: Export digest (Docker Hub)
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          echo "$digest" | sed 's/^sha256://' > "/tmp/digests/${digest#sha256:}"

      - name: Export digest (GHCR)
        run: |
          mkdir -p /tmp/digests-ghcr
          digest="${{ steps.build-ghcr.outputs.digest }}"
          echo "$digest" | sed 's/^sha256://' > "/tmp/digests-ghcr/${digest#sha256:}"

      - name: Upload digest (Docker Hub)
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ matrix.version }}-${{ matrix.platform == 'linux/amd64' && 'amd64' || 'arm64' }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

      - name: Upload digest (GHCR)
        uses: actions/upload-artifact@v4
        with:
          name: digests-ghcr-${{ matrix.version }}-${{ matrix.platform == 'linux/amd64' && 'amd64' || 'arm64' }}
          path: /tmp/digests-ghcr/*
          if-no-files-found: error
          retention-days: 1

  merge:
    needs:
      - define
      - build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: ${{fromJson(needs.define.outputs.kubernetes_versions)}}
    steps:
      - name: Download digests
        uses: actions/download-artifact@v5
        with:
          pattern: digests-${{ matrix.version }}-*
          path: /tmp/digests
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create manifest list and push (Docker Hub)
        run: |
          # First verify the directory and files exist
          ls -la /tmp/digests

          # Create the manifest list
          cd /tmp/digests
          docker buildx imagetools create -t ${{ env.DOCKERHUB_IMAGE }}:${{ matrix.version }} \
            $(for digest in *; do echo -n "${{ env.DOCKERHUB_IMAGE }}@sha256:$digest "; done)

      - name: Inspect image (Docker Hub)
        run: |
          docker buildx imagetools inspect ${{ env.DOCKERHUB_IMAGE }}:${{ matrix.version }}

      - name: Test final image (Docker Hub)
        run: |
          echo "Testing final image functionality..."
          docker run --rm ${{ env.DOCKERHUB_IMAGE }}:${{ matrix.version }} /bin/bash -c "
            echo 'Testing tool versions:' &&
            kubectl version --client &&
            helm version &&
            aws --version &&
            sops --version &&
            helmfile --version &&
            echo 'All tools working correctly!'
          "

  merge-ghcr:
    needs:
      - define
      - build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: ${{fromJson(needs.define.outputs.kubernetes_versions)}}
    steps:
      - name: Download digests (GHCR)
        uses: actions/download-artifact@v5
        with:
          pattern: digests-ghcr-${{ matrix.version }}-*
          path: /tmp/digests-ghcr
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create manifest list and push (GHCR)
        run: |
          # First verify the directory and files exist
          ls -la /tmp/digests-ghcr

          # Create the manifest list
          cd /tmp/digests-ghcr
          docker buildx imagetools create -t ${{ env.GHCR_IMAGE }}:${{ matrix.version }} \
            $(for digest in *; do echo -n "${{ env.GHCR_IMAGE }}@sha256:$digest "; done)

      - name: Inspect image (GHCR)
        run: |
          docker buildx imagetools inspect ${{ env.GHCR_IMAGE }}:${{ matrix.version }}

      - name: Test final image (GHCR)
        run: |
          echo "Testing final image functionality..."
          docker run --rm ${{ env.GHCR_IMAGE }}:${{ matrix.version }} /bin/bash -c "
            echo 'Testing tool versions:' &&
            kubectl version --client &&
            helm version &&
            aws --version &&
            sops --version &&
            helmfile --version &&
            echo 'All tools working correctly!'
          "
