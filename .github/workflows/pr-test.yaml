name: PR Test Build

on:
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]

env:
  DOCKERHUB_IMAGE: sirantd/aws-helm-kubectl
  GHCR_IMAGE: ghcr.io/perun-engineering/aws-helm-kubectl

jobs:
  define:
    runs-on: ubuntu-latest
    outputs:
      kubernetes_versions: ${{ steps.read_env.outputs.versions }}
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Read environment file from PR branch
        id: read_env
        run: |
          # Extract only the KUBERNETES_VERSIONS line and get the array part
          VERSIONS=$(grep '^KUBERNETES_VERSIONS=' .env | cut -d'=' -f2-)
          echo "versions=$VERSIONS" >> $GITHUB_OUTPUT
          echo "Testing with Kubernetes versions: $VERSIONS"

  test-build:
    needs: define
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        version: ${{fromJson(needs.define.outputs.kubernetes_versions)}}
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Read environment file from PR branch
        run: |
          cat .env >> ${GITHUB_ENV}
          echo "=== Environment variables from PR branch ==="
          cat .env
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Test build (no push)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          load: true
          tags: test-image:${{ matrix.version }}
          build-args: |
            KUBE_VERSION=${{ matrix.version }}
            HELM_VERSION=${{ env.HELM_VERSION }}
            SOPS_VERSION=${{ env.SOPS_VERSION }}
            HELM_SECRETS_VERSION=${{ env.HELM_SECRETS_VERSION }}
            HELM_S3_VERSION=${{ env.HELM_S3_VERSION }}
            HELMFILE_VERSION=${{ env.HELMFILE_VERSION }}
            AWS_CLI_VERSION=${{ env.AWS_CLI_VERSION }}
            HELM_DIFF_VERSION=${{ env.HELM_DIFF_VERSION }}
            ALPINE_PYTHON=${{ env.ALPINE_PYTHON }}
            ALPINE_VERSION=${{ env.ALPINE_VERSION }}
      - name: Test image functionality
        run: |
          echo "Testing image functionality..."
          docker run --rm test-image:${{ matrix.version }} /bin/bash -c "
            echo 'Testing tool versions:' &&
            kubectl version --client &&
            helm version &&
            aws --version &&
            sops --version &&
            helmfile --version &&
            echo 'All tools working correctly!'
          "
